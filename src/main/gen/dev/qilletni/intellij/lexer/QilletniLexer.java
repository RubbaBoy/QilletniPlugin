// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Qilletni.flex

/*
  Qilletni.flex â€” Full lexer mirroring reference/QilletniLexer.g4
*/
package dev.qilletni.intellij.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import dev.qilletni.intellij.psi.QilletniTypes;

import static dev.qilletni.intellij.psi.QilletniTypes.*;


public final class QilletniLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STR = 2;
  public static final int ORDER_MODE = 4;
  public static final int LIMIT_MODE = 6;
  public static final int WEIGHT_MODE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\1\7\1\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\12\20\1\21\1\0"+
    "\1\22\1\23\1\22\2\0\3\24\1\25\26\24\1\26"+
    "\1\27\1\30\1\0\1\24\1\0\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\24"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\24\1\61"+
    "\1\62\1\63\1\64\6\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\20\22\1\25"+
    "\1\26\1\27\1\30\1\31\1\0\1\32\1\1\1\16"+
    "\1\33\1\34\1\35\1\1\1\20\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\0\1\44\1\45\1\0\1\46"+
    "\2\22\1\47\1\22\1\50\10\22\1\51\2\22\1\52"+
    "\5\22\1\53\10\22\1\26\1\54\1\55\1\56\4\0"+
    "\1\46\1\22\1\57\7\22\1\60\1\61\2\22\1\62"+
    "\4\22\1\63\11\22\5\0\1\64\4\22\1\65\4\22"+
    "\1\66\1\22\1\67\2\22\1\70\2\22\1\71\2\22"+
    "\1\72\1\22\3\0\1\64\2\0\1\73\1\74\3\22"+
    "\1\75\3\22\1\76\1\22\1\77\5\22\4\0\1\73"+
    "\1\0\2\22\1\100\1\101\1\102\1\22\1\103\1\22"+
    "\1\104\1\105\1\106\1\22\2\0\1\64\1\73\1\107"+
    "\3\22\1\110\1\0\1\111\1\22\1\112\1\113\1\0"+
    "\1\22\1\0\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u0109\0\u0109\0\u01a8\0\u0109\0\u0109\0\u0109\0\u01dd\0\u0109"+
    "\0\u0212\0\u0247\0\u027c\0\u02b1\0\u0109\0\u0173\0\u0173\0\u02e6"+
    "\0\u0109\0\u0109\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424"+
    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc"+
    "\0\u0601\0\u0636\0\u0109\0\u066b\0\u0109\0\u06a0\0\u0109\0\u06d5"+
    "\0\u0109\0\u070a\0\u073f\0\u0109\0\u0109\0\u0109\0\u073f\0\u0109"+
    "\0\u0109\0\u0109\0\u0109\0\u0109\0\u0109\0\u0109\0\u0774\0\u07a9"+
    "\0\u0109\0\u07de\0\u0109\0\u0813\0\u0848\0\u02e6\0\u087d\0\u02e6"+
    "\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25"+
    "\0\u02e6\0\u0a5a\0\u0a8f\0\u02e6\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\u02e6\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\u0109\0\u0109\0\u0109\0\u0109\0\u0d75\0\u0daa"+
    "\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u02e6\0\u0eb3\0\u0ee8\0\u0f1d"+
    "\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u02e6\0\u02e6\0\u1026\0\u105b"+
    "\0\u02e6\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u02e6\0\u1164\0\u1199"+
    "\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341"+
    "\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u13e0\0\u144a\0\u147f\0\u14b4"+
    "\0\u14e9\0\u02e6\0\u151e\0\u1553\0\u1588\0\u15bd\0\u02e6\0\u15f2"+
    "\0\u02e6\0\u1627\0\u165c\0\u02e6\0\u1691\0\u16c6\0\u02e6\0\u16fb"+
    "\0\u1730\0\u02e6\0\u1765\0\u179a\0\u17cf\0\u1804\0\u0109\0\u1839"+
    "\0\u186e\0\u0ddf\0\u02e6\0\u18a3\0\u18d8\0\u190d\0\u02e6\0\u1942"+
    "\0\u1977\0\u19ac\0\u02e6\0\u19e1\0\u02e6\0\u1a16\0\u1a4b\0\u1a80"+
    "\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u0109\0\u1bf3"+
    "\0\u1c28\0\u1c5d\0\u02e6\0\u02e6\0\u02e6\0\u1c92\0\u02e6\0\u1cc7"+
    "\0\u02e6\0\u02e6\0\u02e6\0\u1cfc\0\u1d31\0\u1d66\0\u0ddf\0\u13e0"+
    "\0\u02e6\0\u1d9b\0\u1dd0\0\u1e05\0\u02e6\0\u1e3a\0\u0109\0\u1e6f"+
    "\0\u02e6\0\u02e6\0\u1ea4\0\u1ed9\0\u1f0e\0\u02e6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\30\1\31\1\6\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\2\30\1\41\1\42"+
    "\1\43\1\30\1\44\1\45\1\46\1\30\1\47\1\50"+
    "\1\51\2\30\1\52\2\30\1\53\1\54\1\55\1\6"+
    "\2\56\1\0\2\56\1\57\21\56\1\60\35\56\1\6"+
    "\2\7\1\0\22\6\1\31\1\6\1\61\21\6\1\62"+
    "\13\6\2\7\1\0\14\6\1\63\5\6\1\31\1\6"+
    "\1\64\7\6\1\65\3\6\1\65\5\6\1\65\13\6"+
    "\2\7\1\0\2\6\1\66\6\6\1\67\2\6\1\63"+
    "\36\6\1\66\5\6\66\0\2\7\105\0\1\70\50\0"+
    "\1\71\70\0\1\72\7\0\1\73\56\0\1\74\2\0"+
    "\1\24\2\0\1\75\57\0\1\76\60\0\1\77\4\0"+
    "\1\100\44\0\1\101\16\0\1\102\1\0\1\24\4\0"+
    "\1\103\57\0\1\30\3\0\2\30\3\0\30\30\24\0"+
    "\1\30\3\0\2\30\3\0\12\30\1\104\1\30\1\105"+
    "\4\30\1\106\6\30\24\0\1\30\3\0\2\30\3\0"+
    "\15\30\1\107\11\30\1\110\24\0\1\30\3\0\2\30"+
    "\3\0\15\30\1\111\12\30\24\0\1\30\3\0\2\30"+
    "\3\0\15\30\1\112\12\30\24\0\1\30\3\0\2\30"+
    "\3\0\12\30\1\113\1\114\1\115\13\30\24\0\1\30"+
    "\3\0\2\30\3\0\1\116\14\30\1\117\5\30\1\120"+
    "\4\30\24\0\1\30\3\0\2\30\3\0\5\30\1\121"+
    "\5\30\1\122\1\123\4\30\1\124\6\30\24\0\1\30"+
    "\3\0\2\30\3\0\1\125\27\30\24\0\1\30\3\0"+
    "\2\30\3\0\10\30\1\126\4\30\1\127\12\30\24\0"+
    "\1\30\3\0\2\30\3\0\1\130\3\30\1\131\23\30"+
    "\24\0\1\30\3\0\2\30\3\0\14\30\1\132\3\30"+
    "\1\133\7\30\24\0\1\30\3\0\2\30\3\0\12\30"+
    "\1\134\5\30\1\135\7\30\24\0\1\30\3\0\2\30"+
    "\3\0\4\30\1\136\23\30\24\0\1\30\3\0\2\30"+
    "\3\0\15\30\1\137\4\30\1\140\5\30\24\0\1\30"+
    "\3\0\2\30\3\0\20\30\1\141\7\30\24\0\1\30"+
    "\3\0\2\30\3\0\4\30\1\142\23\30\10\0\1\143"+
    "\55\0\1\144\1\0\1\143\2\56\1\0\2\56\1\0"+
    "\21\56\1\0\35\56\2\145\2\0\1\145\1\146\57\145"+
    "\35\0\1\147\2\0\1\150\44\0\1\63\44\0\12\151"+
    "\1\152\52\151\2\100\1\0\62\100\20\0\1\153\64\0"+
    "\1\30\3\0\2\30\3\0\1\30\1\154\26\30\24\0"+
    "\1\30\3\0\2\30\3\0\27\30\1\155\24\0\1\30"+
    "\3\0\2\30\3\0\15\30\1\156\12\30\24\0\1\30"+
    "\3\0\2\30\3\0\12\30\1\157\15\30\24\0\1\30"+
    "\3\0\2\30\3\0\23\30\1\160\4\30\24\0\1\30"+
    "\3\0\2\30\3\0\21\30\1\161\6\30\24\0\1\30"+
    "\3\0\2\30\3\0\16\30\1\162\11\30\24\0\1\30"+
    "\3\0\2\30\3\0\22\30\1\163\5\30\24\0\1\30"+
    "\3\0\2\30\3\0\12\30\1\164\15\30\24\0\1\30"+
    "\3\0\2\30\3\0\20\30\1\165\7\30\24\0\1\30"+
    "\3\0\2\30\3\0\14\30\1\166\13\30\24\0\1\30"+
    "\3\0\2\30\3\0\16\30\1\167\11\30\24\0\1\30"+
    "\3\0\2\30\3\0\5\30\1\170\14\30\1\171\5\30"+
    "\24\0\1\30\3\0\2\30\3\0\24\30\1\172\3\30"+
    "\24\0\1\30\3\0\2\30\3\0\13\30\1\173\14\30"+
    "\24\0\1\30\3\0\2\30\3\0\15\30\1\174\12\30"+
    "\24\0\1\30\3\0\2\30\3\0\22\30\1\175\5\30"+
    "\24\0\1\30\3\0\2\30\3\0\25\30\1\176\2\30"+
    "\24\0\1\30\3\0\2\30\3\0\3\30\1\177\24\30"+
    "\24\0\1\30\3\0\2\30\3\0\1\200\27\30\24\0"+
    "\1\30\3\0\2\30\3\0\15\30\1\201\12\30\24\0"+
    "\1\30\3\0\2\30\3\0\22\30\1\202\5\30\24\0"+
    "\1\30\3\0\2\30\3\0\14\30\1\203\13\30\24\0"+
    "\1\30\3\0\2\30\3\0\1\204\17\30\1\205\7\30"+
    "\24\0\1\30\3\0\2\30\3\0\23\30\1\206\4\30"+
    "\24\0\1\30\3\0\2\30\3\0\10\30\1\207\17\30"+
    "\54\0\1\210\70\0\1\211\10\0\12\151\1\212\52\151"+
    "\12\213\1\214\4\213\1\215\45\213\20\0\1\153\4\0"+
    "\1\103\57\0\1\30\3\0\2\30\3\0\23\30\1\216"+
    "\4\30\24\0\1\30\3\0\2\30\3\0\12\30\1\217"+
    "\15\30\24\0\1\30\3\0\2\30\3\0\12\30\1\220"+
    "\15\30\24\0\1\30\3\0\2\30\3\0\1\30\1\221"+
    "\26\30\24\0\1\30\3\0\2\30\3\0\4\30\1\222"+
    "\23\30\24\0\1\30\3\0\2\30\3\0\22\30\1\223"+
    "\5\30\24\0\1\30\3\0\2\30\3\0\10\30\1\224"+
    "\17\30\24\0\1\30\3\0\2\30\3\0\21\30\1\206"+
    "\6\30\24\0\1\30\3\0\2\30\3\0\15\30\1\225"+
    "\12\30\24\0\1\30\3\0\2\30\3\0\10\30\1\226"+
    "\17\30\24\0\1\30\3\0\2\30\3\0\1\227\27\30"+
    "\24\0\1\30\3\0\2\30\3\0\10\30\1\230\17\30"+
    "\24\0\1\30\3\0\2\30\3\0\16\30\1\231\11\30"+
    "\24\0\1\30\3\0\2\30\3\0\10\30\1\232\17\30"+
    "\24\0\1\30\3\0\2\30\3\0\4\30\1\233\23\30"+
    "\24\0\1\30\3\0\2\30\3\0\27\30\1\234\24\0"+
    "\1\30\3\0\2\30\3\0\24\30\1\235\3\30\24\0"+
    "\1\30\3\0\2\30\3\0\23\30\1\236\4\30\24\0"+
    "\1\30\3\0\2\30\3\0\6\30\1\237\21\30\24\0"+
    "\1\30\3\0\2\30\3\0\22\30\1\240\5\30\24\0"+
    "\1\30\3\0\2\30\3\0\10\30\1\241\17\30\24\0"+
    "\1\30\3\0\2\30\3\0\4\30\1\242\23\30\24\0"+
    "\1\30\3\0\2\30\3\0\6\30\1\243\21\30\60\0"+
    "\1\244\46\0\1\245\26\0\12\151\1\246\4\151\1\247"+
    "\45\151\12\213\1\250\64\213\1\251\4\213\1\252\45\213"+
    "\20\0\1\30\3\0\2\30\3\0\13\30\1\253\14\30"+
    "\24\0\1\30\3\0\2\30\3\0\4\30\1\254\23\30"+
    "\24\0\1\30\3\0\2\30\3\0\4\30\1\255\23\30"+
    "\24\0\1\30\3\0\2\30\3\0\12\30\1\256\15\30"+
    "\24\0\1\30\3\0\2\30\3\0\27\30\1\257\24\0"+
    "\1\30\3\0\2\30\3\0\22\30\1\260\5\30\24\0"+
    "\1\30\3\0\2\30\3\0\20\30\1\261\7\30\24\0"+
    "\1\30\3\0\2\30\3\0\14\30\1\262\13\30\24\0"+
    "\1\30\3\0\2\30\3\0\22\30\1\263\5\30\24\0"+
    "\1\30\3\0\2\30\3\0\24\30\1\264\3\30\24\0"+
    "\1\30\3\0\2\30\3\0\20\30\1\265\7\30\24\0"+
    "\1\30\3\0\2\30\3\0\10\30\1\266\17\30\24\0"+
    "\1\30\3\0\2\30\3\0\20\30\1\267\7\30\24\0"+
    "\1\30\3\0\2\30\3\0\10\30\1\270\17\30\24\0"+
    "\1\30\3\0\2\30\3\0\14\30\1\271\13\30\24\0"+
    "\1\30\3\0\2\30\3\0\7\30\1\272\20\30\41\0"+
    "\1\273\65\0\1\274\26\0\12\151\1\275\52\151\12\213"+
    "\1\276\4\213\1\277\57\213\1\300\4\213\1\215\45\213"+
    "\20\0\1\30\3\0\2\30\3\0\1\301\27\30\24\0"+
    "\1\30\3\0\2\30\3\0\2\30\1\302\25\30\24\0"+
    "\1\30\3\0\2\30\3\0\4\30\1\303\23\30\24\0"+
    "\1\30\3\0\2\30\3\0\27\30\1\304\24\0\1\30"+
    "\3\0\2\30\3\0\22\30\1\305\5\30\24\0\1\30"+
    "\3\0\2\30\3\0\10\30\1\306\17\30\24\0\1\30"+
    "\3\0\2\30\3\0\4\30\1\307\23\30\24\0\1\30"+
    "\3\0\2\30\3\0\3\30\1\310\24\30\24\0\1\30"+
    "\3\0\2\30\3\0\14\30\1\311\13\30\24\0\1\30"+
    "\3\0\2\30\3\0\2\30\1\312\25\30\24\0\1\30"+
    "\3\0\2\30\3\0\6\30\1\313\21\30\24\0\1\30"+
    "\3\0\2\30\3\0\22\30\1\314\5\30\51\0\1\315"+
    "\62\0\1\316\21\0\12\151\1\275\4\151\1\317\45\151"+
    "\12\213\1\300\64\213\1\300\4\213\1\320\45\213\20\0"+
    "\1\30\3\0\2\30\3\0\14\30\1\321\13\30\24\0"+
    "\1\30\3\0\2\30\3\0\22\30\1\322\5\30\24\0"+
    "\1\30\3\0\2\30\3\0\22\30\1\323\5\30\24\0"+
    "\1\30\3\0\2\30\3\0\4\30\1\324\23\30\24\0"+
    "\1\30\3\0\2\30\3\0\21\30\1\325\6\30\57\0"+
    "\1\326\46\0\1\327\47\0\1\30\3\0\2\30\3\0"+
    "\10\30\1\330\17\30\24\0\1\30\3\0\2\30\3\0"+
    "\27\30\1\331\24\0\1\30\3\0\2\30\3\0\20\30"+
    "\1\332\7\30\45\0\1\333\43\0\1\30\3\0\2\30"+
    "\3\0\15\30\1\334\12\30\35\0\1\335\53\0\1\30"+
    "\3\0\2\30\3\0\14\30\1\336\13\30\47\0\1\327"+
    "\21\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8003];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\2\1\2\11\1\1\3\11\1\1\1\11"+
    "\4\1\1\11\3\1\2\11\20\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\0\1\11\2\1\3\11\1\1\7\11"+
    "\1\0\1\1\1\11\1\0\1\11\37\1\4\11\4\0"+
    "\35\1\5\0\27\1\3\0\1\11\2\0\21\1\4\0"+
    "\1\11\1\0\14\1\2\0\7\1\1\0\1\11\3\1"+
    "\1\0\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public QilletniLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 77: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 78: break;
          case 3:
            { return QilletniTypes.NOT;
            }
          // fall through
          case 79: break;
          case 4:
            { yybegin(STR); /* consume content in STR, emit STRING on close */
            }
          // fall through
          case 80: break;
          case 5:
            { return QilletniTypes.MOD;
            }
          // fall through
          case 81: break;
          case 6:
            { return QilletniTypes.LEFT_PAREN;
            }
          // fall through
          case 82: break;
          case 7:
            { return QilletniTypes.RIGHT_PAREN;
            }
          // fall through
          case 83: break;
          case 8:
            { return QilletniTypes.STAR;
            }
          // fall through
          case 84: break;
          case 9:
            { return QilletniTypes.PLUS;
            }
          // fall through
          case 85: break;
          case 10:
            { return QilletniTypes.COMMA;
            }
          // fall through
          case 86: break;
          case 11:
            { return QilletniTypes.MINUS;
            }
          // fall through
          case 87: break;
          case 12:
            { return QilletniTypes.DOT;
            }
          // fall through
          case 88: break;
          case 13:
            { return QilletniTypes.DIV;
            }
          // fall through
          case 89: break;
          case 14:
            { return QilletniTypes.INT;
            }
          // fall through
          case 90: break;
          case 15:
            { return QilletniTypes.COLON;
            }
          // fall through
          case 91: break;
          case 16:
            { return QilletniTypes.REL_OP;
            }
          // fall through
          case 92: break;
          case 17:
            { return QilletniTypes.ASSIGN;
            }
          // fall through
          case 93: break;
          case 18:
            { return QilletniTypes.ID;
            }
          // fall through
          case 94: break;
          case 19:
            { return QilletniTypes.LEFT_SBRACKET;
            }
          // fall through
          case 95: break;
          case 20:
            { return QilletniTypes.RIGHT_SBRACKET;
            }
          // fall through
          case 96: break;
          case 21:
            { return QilletniTypes.LEFT_CBRACKET;
            }
          // fall through
          case 97: break;
          case 22:
            { yybegin(WEIGHT_MODE); return QilletniTypes.WEIGHT_PIPE;
            }
          // fall through
          case 98: break;
          case 23:
            { return QilletniTypes.RIGHT_CBRACKET;
            }
          // fall through
          case 99: break;
          case 24:
            { /* text, continue */
            }
          // fall through
          case 100: break;
          case 25:
            { yybegin(YYINITIAL); return QilletniTypes.STRING;
            }
          // fall through
          case 101: break;
          case 26:
            { yybegin(YYINITIAL); return QilletniTypes.RIGHT_SBRACKET;
            }
          // fall through
          case 102: break;
          case 27:
            { yybegin(YYINITIAL); return RIGHT_SBRACKET;
            }
          // fall through
          case 103: break;
          case 28:
            { return QilletniTypes.LIMIT_UNIT;
            }
          // fall through
          case 104: break;
          case 29:
            { yybegin(YYINITIAL); return QilletniTypes.WEIGHT_UNIT;
            }
          // fall through
          case 105: break;
          case 30:
            { return QilletniTypes.ANDAND;
            }
          // fall through
          case 106: break;
          case 31:
            { return QilletniTypes.INCREMENT;
            }
          // fall through
          case 107: break;
          case 32:
            { return QilletniTypes.PLUS_EQUALS;
            }
          // fall through
          case 108: break;
          case 33:
            { return QilletniTypes.DECREMENT;
            }
          // fall through
          case 109: break;
          case 34:
            { return QilletniTypes.MINUS_EQUALS;
            }
          // fall through
          case 110: break;
          case 35:
            { return QilletniTypes.DOUBLE_DOT;
            }
          // fall through
          case 111: break;
          case 36:
            { return QilletniTypes.LINE_COMMENT;
            }
          // fall through
          case 112: break;
          case 37:
            { return QilletniTypes.FLOOR_DIV;
            }
          // fall through
          case 113: break;
          case 38:
            { return QilletniTypes.DOUBLE;
            }
          // fall through
          case 114: break;
          case 39:
            { return QilletniTypes.AS;
            }
          // fall through
          case 115: break;
          case 40:
            { return QilletniTypes.BY;
            }
          // fall through
          case 116: break;
          case 41:
            { return QilletniTypes.IF_KEYWORD;
            }
          // fall through
          case 117: break;
          case 42:
            { return QilletniTypes.IS_KEYWORD;
            }
          // fall through
          case 118: break;
          case 43:
            { return QilletniTypes.ON;
            }
          // fall through
          case 119: break;
          case 44:
            { return QilletniTypes.OROR;
            }
          // fall through
          case 120: break;
          case 45:
            { /* any escape sequence, continue */
            }
          // fall through
          case 121: break;
          case 46:
            { /* escaped quote, continue */
            }
          // fall through
          case 122: break;
          case 47:
            { return QilletniTypes.ANY_TYPE;
            }
          // fall through
          case 123: break;
          case 48:
            { return QilletniTypes.FOR_KEYWORD;
            }
          // fall through
          case 124: break;
          case 49:
            { return QilletniTypes.FUNCTION_DEF;
            }
          // fall through
          case 125: break;
          case 50:
            { return QilletniTypes.INT_TYPE;
            }
          // fall through
          case 126: break;
          case 51:
            { return QilletniTypes.NEW;
            }
          // fall through
          case 127: break;
          case 52:
            { return QilletniTypes.BLOCK_COMMENT;
            }
          // fall through
          case 128: break;
          case 53:
            { return QilletniTypes.ELSE_KEYWORD;
            }
          // fall through
          case 129: break;
          case 54:
            { return QilletniTypes.JAVA_TYPE;
            }
          // fall through
          case 130: break;
          case 55:
            { return QilletniTypes.LOOP_PARAM;
            }
          // fall through
          case 131: break;
          case 56:
            { return QilletniTypes.PLAY;
            }
          // fall through
          case 132: break;
          case 57:
            { return QilletniTypes.SONG_TYPE;
            }
          // fall through
          case 133: break;
          case 58:
            { return QilletniTypes.BOOL;
            }
          // fall through
          case 134: break;
          case 59:
            { return QilletniTypes.DOC_COMMENT;
            }
          // fall through
          case 135: break;
          case 60:
            { return QilletniTypes.ALBUM_TYPE;
            }
          // fall through
          case 136: break;
          case 61:
            { return QilletniTypes.EMPTY;
            }
          // fall through
          case 137: break;
          case 62:
            { yybegin(LIMIT_MODE); return LIMIT_PARAM;
            }
          // fall through
          case 138: break;
          case 63:
            { yybegin(ORDER_MODE); return ORDER_PARAM;
            }
          // fall through
          case 139: break;
          case 64:
            { return QilletniTypes.DOUBLE_TYPE;
            }
          // fall through
          case 140: break;
          case 65:
            { return QilletniTypes.ENTITY;
            }
          // fall through
          case 141: break;
          case 66:
            { return QilletniTypes.IMPORT;
            }
          // fall through
          case 142: break;
          case 67:
            { return QilletniTypes.NATIVE;
            }
          // fall through
          case 143: break;
          case 68:
            { return QilletniTypes.RETURN;
            }
          // fall through
          case 144: break;
          case 69:
            { return QilletniTypes.STATIC;
            }
          // fall through
          case 145: break;
          case 70:
            { return QilletniTypes.STRING_TYPE;
            }
          // fall through
          case 146: break;
          case 71:
            { return QilletniTypes.BOOLEAN_TYPE;
            }
          // fall through
          case 147: break;
          case 72:
            { return QilletniTypes.WEIGHTS_KEYWORD;
            }
          // fall through
          case 148: break;
          case 73:
            { return QilletniTypes.COLLECTION_ORDER;
            }
          // fall through
          case 149: break;
          case 74:
            { return QilletniTypes.RANGE_INFINITY;
            }
          // fall through
          case 150: break;
          case 75:
            { return QilletniTypes.PROVIDER;
            }
          // fall through
          case 151: break;
          case 76:
            { return QilletniTypes.COLLECTION_TYPE;
            }
          // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
